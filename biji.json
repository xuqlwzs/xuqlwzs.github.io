{
    "data":{
         "jQuery":{
                 "youshi":[
                     "体积小,压缩后只有100KB左右",
                      "强大的选择器",
                      "出色的DOM封装",
                      "可靠的事件处理机制",
                      "出色的浏览器兼容性",
                      "使用隐式迭代简化编程",
                      "与Ajax技术完美结合"
                 ],
                  "xuanzeqi":[
                     "标签选择器:(标签比如:dd、h1、div、a、p、li等)通过“”找到标签 例如$(“//需要找到的标签”) 标签只能用HTML存在的标签",
                     "类选择器:通过. 找到类 例如$(.//需要找到的类)",
                     "Id选择器:通过# 找到Id 例如$(#//需要找到的Id)",
                     "并级选择器:通过 , 选择 例如$(.a,#b)",
                     "全局选择器:通过 * 选择所有 例如$(*)"
                  ],
                 "duixiang":[
                   "jQuery对象:使用jQuery包装DOM对象后产生;使用$()函数进行转化：$(DOM对象);jQuery对象是一个类似数组的对象,可以通过[index]的方法得到相应的DOM对象;通过get(index)方法得到相应的DOM对象"
                 ],
                "curd":[
                    "append的作用:$('父标签').append(子元素)追加到父标签里面的最后面",
                    "prepend()的作用:$添加到父标签里面的最前面",
                    "after()的作用:$（“兄长标签”）.after(兄弟元素)；添加兄弟元素到兄长标签挨着的后面，两者是并列的关系，两者共有的父标签",
                    "before()的作用:$(兄弟元素).before(“兄长标签“)；添加兄长标签到兄弟元素挨着的前面，两者是并列的关系，两者有共同的父标签",
                    "$（元素对象）.attr('属性名','属性值'）；添加属性和属性值",
                    "remove的作用 :$（“父标签”）.remove(子元素)从父标签中移除子元素",
                    "empty()的作用:$(“父标签”).empty;将父标签里面的全部元素清空",
                    "$（元素对象）.removeAttr(“属性名”)根据属性名将元素对象的属性名和属性值全部移除掉",
                    "detach():删除整个节点，保留元素的绑定事件、附加的数据",
                    "remove(); 删除整个节点 例如：$(selector).remove([expr])",
                    "empty();清空节点内容 例如：$(selector).empty()",
                    "clone()的作用:$(被克隆的元素).clone(true)结果值就是克隆出来的新元素"
              
                 ],
                "huoquyuansu":[
                  "children()方法可以用来获取元素的所有子元素 语法：$('选择器').children()",
                  "$('选择器').children('div') 获取该标签里div的子元素",
                  "$('选择器').next() 获取该标签元素挨着的下一个是同辈元素,他们必须有共同的父标签",
                  "$('选择器').prev() 获取该标签元素挨着的上一个是同辈元素，他们必须有共同的父标签",
                  "$('选择器').slibings() 获取该标签的同辈元素，不包括它自身，他们必须有共同的父标签",
                  "$('选择器').parent() 获取该标签的直接父标签，不包括它爷爷辈的标签",
                  "$('选择器').parents() 获取该标签的全部先辈元素,包括body和html"
                ],
             "bianli":[
                  " each(function(){   console.log(this);    //没有参数的话})",
                  "each(function(index){   console.log(this);    //一个参数的话，索引 })",
                  "each(function(index,item){   console.log(item);    //两个参数的话，一个是索引，一个是参数本身 })"
             ],
            "suoyin":[
                   "$('tr:even')：选取偶数位置的 <tr> 元素,注意下标从0开始",
                   "$('tr:odd')：选取奇数位置的<tr>元素,注意下标从0开始",
                   "$('p:not(.intro)'):选取除了 class='intro' 元素以外的所有 <p> 元素"
            ],
          "shuxinxzq":[
                "$('标签[属性名]')   获取带有属性名是中括号里面的该类标签   例如：$('a[class]')  获取带有class属性名的a标签",
                "$('标签[属性名=属性值]')   获取带有属性名并且属性值是指定值的该类标签   例如：$('a[class=hot]')  获取属性名是class属性并且该属性的值是hot的a标签",
                "$('标签[属性名!=属性值]')   获取带有属性名并且属性值不是指定值的该类标签  例如：$('a[class!=hot]') 获取属性名是class属性并且该属性的值不是hot的a标签",
                "$('标签[属性名^=属性值]')     获取带有属性名并且属性值是以指定的内容开头的该类标签  例如：$('a[href^=www]')  获取属性名是href并且该属性的值以www开头的a标签",
                "$('标签[属性名$='.指定值']')   获取带有属性名并且属性值是以指定的内容结束的该类标签  例如：$('a[href $='.html')  获取带有属性名是href并且该属性的值以.html结尾的a标签",
                "$('标签[属性名*='含有的值']')   获取带有属性名并且属性值里面含有指定的值的该类标签   例如：$('a[href*='news''])  获取带有属性名是href并且该属性的值含有news的a标签不实现a标签默认跳转 href='javascript:void(0);''"
          ]
     },
     "home":{
        "ce":[
          "学习笔记",
          "听音乐",
          "小游戏",
          "事项记录"
        ],
        "xuexi":[
          "jQuery",
          "css",
          "javascript",
          "html",
          "java",
          "linux",
          "erp"
        ]
        
     }

    }
}